package DAO;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import Model.Message;
import Util.ConnectionUtil;

public class MessagesDAO {
    
    /**
     * Retrieves all Messages from the Message table.
     * @return a list of all Messages.
     */
    public List<Message> getAllMessages(){
        Connection connection = ConnectionUtil.getConnection();
        List<Message> messageList = new ArrayList<>();

        try {
            String sql = "SELECT * FROM message";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            ResultSet rs = preparedStatement.executeQuery();

            while(rs.next()){
                Message message = new Message(rs.getInt("message_id"), rs.getInt("posted_by"),
                                                rs.getString("message_text"), rs.getInt("time_posted_epoch"));
                messageList.add(message);
            }
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }

        return messageList;
    }

    /**
     * Insert an Message into the Message table.
     * The Message_id should be automatically generated by the sql database if it is not provided because it was
     * set to auto_increment.
     * @param message to be inserted
     * @return the newly inserted message
     */
    public Message insertMessage(Message message){
        Connection connection = ConnectionUtil.getConnection();
        try {
            //Only inserting the username and password columns, because the database automatically 
            //generates a primary key.
            String sql = "INSERT INTO message (posted_by, message_text, time_posted_epoch) VALUES (?, ?, ?)";
            PreparedStatement preparedStatement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);

            preparedStatement.setInt(1, message.getPosted_by());
            preparedStatement.setString(2, message.getMessage_text());
            preparedStatement.setLong(3, message.getTime_posted_epoch());
            preparedStatement.executeUpdate();
            
            ResultSet pkeyResultSet = preparedStatement.getGeneratedKeys();
            if(pkeyResultSet.next()){
                int generated_Message_id = (int) pkeyResultSet.getLong(1);
                return new Message(generated_Message_id, message.getPosted_by(), 
                                    message.getMessage_text(), 
                                    message.getTime_posted_epoch());
            }
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }
        return null;
    }

    /**
     * Retrieves a message from the given message id
     * @param a message id
     * @return the message associated with the given message id
     */
    public Message getMessageById(int id)
    {
        Connection connection = ConnectionUtil.getConnection();
        try {
            String sql = "SELECT * FROM message WHERE message_id = ?";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);

            preparedStatement.setInt(1, id);
            
            ResultSet pkeyResultSet = preparedStatement.executeQuery();
            if(pkeyResultSet.next()){
                return new Message(id, pkeyResultSet.getInt("posted_by"), 
                                    pkeyResultSet.getString("message_text"), 
                                    pkeyResultSet.getInt("time_posted_epoch"));
            }
        } catch(SQLException e) {
            System.out.println(e.getMessage());
        }
        return null;
    }

    /**
     * Deletes a message using the given message id
     * @param a message id
     * @return the message associated with the given message id
     */
    public Message deleteMessageById(int id)
    {
        Connection connection = ConnectionUtil.getConnection();
        try {
            Message message = getMessageById(id);

            String sql = "DELETE FROM message WHERE message_id = ?";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);

            preparedStatement.setInt(1, id);
            preparedStatement.executeUpdate();

            return message;
            
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }

        return null;
    }

    /**
     * Updates a message using the message id in the given message
     * @param a message id
     * @return the updated message
     */
    public Message updateMessage(Message message)
    {
        Connection connection = ConnectionUtil.getConnection();
        try {
            String sql = "UPDATE message SET posted_by = ?, message_text = ?, time_posted_epoch = ? WHERE message_id = ?";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);

            //Using a reference message object to get the time posted and poster id
            Message ref = getMessageById(message.getMessage_id());
            message.setTime_posted_epoch(ref.getTime_posted_epoch());
            message.setPosted_by(ref.getPosted_by());

            preparedStatement.setInt(1, message.getPosted_by());
            preparedStatement.setString(2, message.getMessage_text());
            preparedStatement.setLong(3, message.getTime_posted_epoch());
            preparedStatement.setInt(4, message.getMessage_id());
            preparedStatement.executeUpdate();

            return message;

        } catch(SQLException e) {
            System.out.println(e.getMessage());
        }
        return null;
    }

    /**
     * Determines if a message id exists in the databaseRetrieves a message from the given message id
     * @param a message id
     * @return true if exists, false otherwise
     */
    public boolean messageIdExists(int id)
    {
        Connection connection = ConnectionUtil.getConnection();
        try {
            String sql = "SELECT EXISTS (SELECT 1 FROM message WHERE message_id = ?) AS id_exists" ;
            PreparedStatement preparedStatement = connection.prepareStatement(sql);

            preparedStatement.setInt(1, id);
            
            ResultSet resultSet = preparedStatement.executeQuery();
            if(resultSet.next()){

                return resultSet.getInt("id_exists") == 1;
            }
        } catch(SQLException e) {
            System.out.println(e.getMessage());
        }

        return false;
    }

    /**
     * Gets all messages associated with a user
     * @param a message id
     * @return An array list of all the user's messages
     */
    public ArrayList<Message> getMessagesByUser(int id) {

        Connection connection = ConnectionUtil.getConnection();
        try {

            ArrayList<Message> list = new ArrayList<>();
            String sql = "SELECT * FROM message WHERE posted_by = ?";

            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            preparedStatement.setInt(1, id);

            ResultSet pkeyResultSet = preparedStatement.executeQuery();
            while(pkeyResultSet.next()){
                Message message = new Message(pkeyResultSet.getInt("message_id"), pkeyResultSet.getInt("posted_by"),
                    pkeyResultSet.getString("message_text"), 
                    pkeyResultSet.getLong("time_posted_epoch"));

                list.add(message);
            }

            return list;
        } catch(SQLException e) {
            System.out.println(e.getMessage());
        }

        return null;
    }
}
