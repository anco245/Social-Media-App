package DAO;

import Model.Account;
import Util.ConnectionUtil;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class AccountDAO {
    
     /**
     * Retrieves all Accounts from the Account table.
     * @return a list of all Accounts.
     */
    public List<Account> getAllAccounts(){
        Connection connection = ConnectionUtil.getConnection();
        List<Account> Accounts = new ArrayList<>();

        try {
            String sql = "SELECT * FROM account";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            ResultSet rs = preparedStatement.executeQuery();

            while(rs.next()){
                Account accounts = new Account(rs.getInt("account_id"), rs.getString("username"),
                                                rs.getString("password"));
                Accounts.add(accounts);
            }
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }

        return Accounts;
    }

    /**
     * Makes sure that the given username and password (in the form of an account object)
     * belongs to an account in the database
     * @param an Account object with login information to be verfied
     * @return Account that belongs to the verified username and password
     */
    public Account verifyAccount(Account account)
    {
        Connection connection = ConnectionUtil.getConnection();
        try {
            String sql = "SELECT account_id FROM account WHERE username = ? AND password = ?";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);

            preparedStatement.setString(1, account.getUsername());
            preparedStatement.setString(2, account.getPassword());
            
            ResultSet pkeyResultSet = preparedStatement.executeQuery();
            if(pkeyResultSet.next()){
                account.setAccount_id(pkeyResultSet.getInt("account_id"));
                return account;
            }
        } catch(SQLException e) {
            System.out.println(e.getMessage());
        }

        return null;
    }

    /**
     * Adds an Account into the account table.
     * The Account_id should be automatically generated by the sql database if it is not provided because it was
     * set to auto_increment.
     * @param Account to be inserted
     * @return newly inserted account
     */
    public Account insertAccount(Account account){
        Connection connection = ConnectionUtil.getConnection();
        try {
            //Only inserting the username and password columns, because the database
            //automatically generates a primary key.
            String sql = "INSERT INTO account (username, password) VALUES (?, ?)" ;
            PreparedStatement preparedStatement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);

            preparedStatement.setString(1, account.getUsername());
            preparedStatement.setString(2, account.getPassword());
            preparedStatement.executeUpdate();
            
            ResultSet pkeyResultSet = preparedStatement.getGeneratedKeys();
            if(pkeyResultSet.next()){
                int generated_Account_id = (int) pkeyResultSet.getLong(1);
                return new Account(generated_Account_id, account.getUsername(), account.getPassword());
            }
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }
        return null;
    }

    /**
     * Checks to see if an account with a given username already exists in the database
     * @param an Account to be checked
     * @return True if username already exists, false otherwise
     */
    public boolean usernameExists(String username)
    {
        Connection connection = ConnectionUtil.getConnection();
        try {
            String sql = "SELECT EXISTS (SELECT 1 FROM account WHERE username = ?) AS name_exists" ;
            PreparedStatement preparedStatement = connection.prepareStatement(sql);

            preparedStatement.setString(1, username);
            
            ResultSet resultSet = preparedStatement.executeQuery();
            if(resultSet.next()){

                return resultSet.getInt("name_exists") == 1;
            }
        } catch(SQLException e) {
            System.out.println(e.getMessage());
        }

        return false;
    }

    /**
     * Retrieves account belonging to id in database
     * @param int id of user
     * @return account belonging to id
     */
    public Account getUserById(int id) {
        Connection connection = ConnectionUtil.getConnection();
        try {
            String sql = "SELECT * FROM account WHERE account_id = ?" ;
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            preparedStatement.setInt(1, id);
            
            ResultSet resultSet = preparedStatement.executeQuery();
            if(resultSet.next()){
                return new Account(id, resultSet.getString("username"), resultSet.getString("password"));
            }
        } catch(SQLException e) {
            System.out.println(e.getMessage());
        }

        return null;
    }
}
